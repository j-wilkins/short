#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'shortener'

def start_web
  begin
    require 'vegas'
  rescue LoadError
    require 'rubygems'
    require 'vegas'
  end
  require 'shortener/server'


  Vegas::Runner.new(Shortener::Server, 'shortener-server', {
    :before_run => lambda {|v|
      path = (ENV['SHORTENER_CONFIG'] || v.args.first)
      #load path.to_s.strip if path
    }
  }) do |runner, opts, app|
    #opts.on('-H HOST', "--host HOST", "set the Redis host") {|host|
      #runner.logger.info "Using Redis host '#{host}'"
      #Resque.redis = host
    #}
  end
end

def shorten(url)
  begin
    puts Shortener.shorten(url).short_url
  rescue Shortener::NetworkException => boom
    puts boom.message
    usage
  end
end

def fetch(url)
  if url =~ /http:/
    url = url[-6..-1]
  end
  begin
    fetched = Shortener.fetch(url)
  rescue Shortener::NetworkException => boom
    puts boom.message
    exit
  end
  unless fetched['success'] == false
    puts <<-EOF
  short       => #{fetched['shortened']}
  url         => #{fetched['url']}
  short-url   => #{fetched.short_url}
  set-count   => #{fetched['set-count']}
  click-count => #{fetched['click-count']}
  expired     => #{fetched['expired']}
  maxed       => #{fetched['maxed']}
    EOF
  else
    puts fetched['message']
  end
end

def delete(short)
  begin
    del =  Shortener.delete(short)
  rescue Shortener::NetworkException => boom
    puts boom.message
    exit
  end
  puts "#{short} deleted" if del['success']
end

def show_index
  begin
    index = Shortener.index
  rescue Shortener::NetworkException => boom
    puts boom.message
  end
  short_summary = index.map do |v|
    url = v['url'].length > 38 ? "#{v['url'][0..25]}...#{v['url'][-10..-1]}" : "#{v['url']}"
    "#{v['shortened']} :   #{url}  #{v['type'].nil? ? '' : ('type: ' + v['type'])}"
  end.join("\n")
  puts <<-EOD
shorts: #{index.length}

#{short_summary}


EOD
end

def rake(arg)
  puts "running shortener rake task: #{arg}"
  gem_dir = File.expand_path(File.dirname(File.dirname(__FILE__)))
  cmd = "cd #{gem_dir} && rake #{arg}"
  puts `#{cmd}`
end

def do_action(act, arg)
  unless arg.nil?
    send(act, arg)
  else
    usage
  end
end

def usage
  puts <<EOU
  Usage: short COMMAND <arg>

  a command could be:
    shorten:  get a shortened version of <arg>.
    fetch:    get data for <arg> which should be a short.
    delete:   delete a short from the index.
    index:    show summary data for all shorts.

    rake:     run a shortener rake task. [heroku:build, heroku:setup...]
    server:   start an instance of the shortener server locally.

  the default command is shorten, so that one could

     short www.google.com

  and the result would be a short for www.google.com
EOU
end

def write_configuration
  store = ARGV.shift(2)
  puts "the Short command line tool works best with a config file, ~/.shortener."
  puts "We didn't find on, if you'd like we can write one now. (y|n)"
  if gets.chomp == 'y'
    opts = Hash.new
    puts "sweet. What is the URL for your shortener server?"
    opts[:SHORTENER_URL] = gets.chomp
    puts "for your shortener server, what would you like the default redirect to be? (defaults to /index)"
    opts[:DEFAULT_URL] = gets.chomp
    puts "are you going to be running the server on this computer? (y|n)"
    if gets.chomp == 'y'
      puts "what url would you like to use for redis? (ex. redis://localhost:6379)"
      opts[:REDISTOGO_URL] = gets.chomp
      puts "would you like to enabled S3 uploads? (y|n)"
      if gets.chomp == 'y'
        opts[:S3_ENABLED] = true
        puts "You will want to set the following options, either in your ENV of edit this config:"
        puts "S3_KEY_PREFIX, S3_ACCESS_KEY_ID, S3_SECRET_ACCESS_KEY, S3_DEFAULT_ACL, S3_BUCKET\n\n"
      end
    end
    puts "nice. for now, that's all we need. writing file...\n\n"
    File.open(@conf_file, 'w') {|f| f.puts opts.to_yaml}
  else
    puts "fine, but any errors aren't my fault.\n\n"
  end
  ARGV.concat(store)
end

@conf_file = ENV['DOTFILE_PATH'] || File.join(ENV['HOME'], ".shortener")

write_configuration unless File.exists?(@conf_file)

case ARGV[0]
when 'shorten'
  do_action(:shorten, ARGV[1])
when 'fetch'
  do_action(:fetch, ARGV[1])
when 'server'
  start_web
when 'index'
  show_index
when 'rake'
  do_action(:rake, ARGV[1])
when 'delete'
  do_action(:delete, ARGV[1])
when '-v', '--version'
  puts "short version #{Shortener::VERSION}"
else
  do_action(:shorten, ARGV[0])
end
