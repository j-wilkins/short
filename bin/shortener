#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'shortener/client'

def start_web
  begin
    require 'vegas'
  rescue LoadError
    require 'rubygems'
    require 'vegas'
  end
  require 'shortener/server'


  Vegas::Runner.new(Shortener::Server, 'shortener-server', {
    :before_run => lambda {|v|
      path = (ENV['SHORTENER_CONFIG'] || v.args.first)
      #load path.to_s.strip if path
    }
  }) do |runner, opts, app|
    #opts.on('-H HOST', "--host HOST", "set the Redis host") {|host|
      #runner.logger.info "Using Redis host '#{host}'"
      #Resque.redis = host
    #}
  end
end

def shorten(url)
  puts Shortener::Client.new.shorten(url)['url']
end

def fetch(url)
  if url =~ /http:/
    url = url[-6..-1]
  end
  fetched = Shortener::Client.new.fetch(url)
  puts <<-EOF
  short       => #{fetched['shortened']}
  url         => #{fetched['url']}
  set-count   => #{fetched['set-count']}
  click-count => #{fetched['click-count']}
  expired     => #{fetched['expired']}
  maxed       => #{fetched['maxed']}
EOF
end

def delete(short)
  del =  Shortener::Client.new.delete(short)
  puts "#{short} deleted" if del['success']
end

def show_index
  index = Shortener::Client.new.index
  short_summary = index.map do |v| 
    url = v['url'].length > 38 ? "#{v['url'][0..25]}...#{v['url'][-10..-1]}" : "#{v['url']}"
    "#{v['shortened']} :   #{url}  #{v['type'].nil? ? '' : ('type: ' + v['type'])}"
  end.join("\n")
  puts <<-EOD
shorts: #{index.length}

#{short_summary}


EOD
end

def rake(arg)
  puts "running shortener rake task: #{arg}"
  gem_dir = File.expand_path(File.dirname(File.dirname(__FILE__)))
  cmd = "cd #{gem_dir} && rake #{arg}"
  puts `#{cmd}`
end

def do_action(act, arg)
  unless arg.nil?
    send(act, arg)
  else
    usage
  end
end

def usage
  puts <<EOU
  Usage: shortener COMMAND <arg>

  a command could be:
    shorten:  get a shortened version of <arg>.
    fetch:    get data for <arg> which should be a short.
    index:    show summary data for all shorts.

  the default command is shorten, so that one could
    
     shortener www.google.com

  and the result would be a short for www.google.com
EOU
end

case ARGV[0]
when 'shorten'
  do_action(:shorten, ARGV[1])
when 'fetch'
  do_action(:fetch, ARGV[1])
when 'server'
  start_web
when 'index'
  show_index
when 'rake'
  do_action(:rake, ARGV[1])
when 'delete'
  do_action(:delete, ARGV[1])
else
  do_action(:shorten, ARGV[0])
end
